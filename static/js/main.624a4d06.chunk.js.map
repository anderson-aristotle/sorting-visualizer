{"version":3,"sources":["Components/CustomSlider/CustomSlider.js","Logic/algorithms.js","Components/Visualizer/Visualizer.constants.js","Logic/helpers.js","Components/Visualizer/Visualizer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["CustomHandle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","key","CustomSlider","handleAfterChange","attribute","text","rest","className","defaultValue","handle","onAfterChange","GenerateCustomSlider","CustomComponent","customProps","swap","indexA","indexB","array","temp","sorts","BUBBLE_SORT","unsortedArray","isSorted","lastUnsorted","length","phases","i","push","MERGE_SORT","QUICK_SORT","HEAP_SORT","INSERTION_SORT","DEFAULTS","randomIntFromInterval","min","max","Math","floor","random","algorithms","_","keys","Visualizer","resetArray","size","generateRandomArray","state","clearTimeout","timeoutID","setState","cancelExecution","handleSort","sortType","isSorting","onHaltExecution","sort","stepThroughPhases","delay","newArray","shift","setTimeout","onHandleAfterChange","this","type","onClick","map","name","toLowerCase","split","join","nameToString","style","height","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.624a4d06.chunk.js","sourcesContent":["import 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport React from 'react';\nimport Tooltip from 'rc-tooltip';\nimport { Handle } from 'rc-slider';\nimport Slider from 'rc-slider';\nimport './CustomSlider.scss';\n\nexport const CustomHandle = props => {\n  const { value, dragging, index, ...restProps } = props;\n\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nexport const CustomSlider = props => {\n  const { value, handleAfterChange, attribute, text, ...rest } = props;\n\n  return (\n    <div className=\"custom-slider\">\n      <p>{text}</p>\n      <p>current value: {value}</p>\n      <Slider\n        {...rest}\n        defaultValue={value}\n        handle={CustomHandle}\n        onAfterChange={value => handleAfterChange(attribute, value)}\n      />\n    </div>\n  );\n};\n\nexport const GenerateCustomSlider = ({\n  CustomComponent = CustomSlider,\n  ...customProps\n}) => {\n  return <CustomComponent {...customProps} />;\n};\n","const bubbleSort = unsortedArray => {\n  let isSorted = false;\n  let lastUnsorted = unsortedArray.length - 1;\n  const phases = [];\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < lastUnsorted; i++) {\n      if (unsortedArray[i] > unsortedArray[i + 1]) {\n        swap(i, i + 1, unsortedArray);\n        isSorted = false;\n      }\n      phases.push([...unsortedArray]);\n    }\n    lastUnsorted--;\n  }\n  return phases;\n};\n\nconst mergeSort = unsortedArray => {\n  // @todo\n\n  return [unsortedArray];\n};\n\nconst quickSort = unsortedArray => {\n  // @todo\n\n  return [unsortedArray];\n};\n\nconst heapSort = unsortedArray => {\n  // @todo\n\n  return [unsortedArray];\n};\n\nconst insertionSort = unsortedArray => {\n  // @todo\n\n  return [unsortedArray];\n};\n\nfunction swap(indexA, indexB, array) {\n  let temp = array[indexA];\n  array[indexA] = array[indexB];\n  array[indexB] = temp;\n}\n\nexport const sorts = {\n  BUBBLE_SORT: bubbleSort,\n  MERGE_SORT: mergeSort,\n  QUICK_SORT: quickSort,\n  HEAP_SORT: heapSort,\n  INSERTION_SORT: insertionSort,\n};\n","export const DEFAULTS = {\n  DELAY: 200,\n  HEIGHT_MULTIPLIER: 4,\n  INTERVAL_MAX: 100,\n  INTERVAL_MIN: 5,\n  SIZE: 15,\n  WIDTH: 20,\n};\n","import _ from 'lodash';\n\nexport const randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const generateRandomArray = (size, min, max) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(randomIntFromInterval(min, max));\n  }\n\n  return array;\n};\n\nexport const arraysAreEqual = (arrayOne, arrayTwo) => {\n  return _.isEqual(arrayOne, arrayTwo);\n};\n\nexport const nameToString = name => {\n  const str = name\n    .toLowerCase()\n    .split('_')\n    .join(' ');\n  return str;\n};\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport './Visualizer.scss';\nimport { GenerateCustomSlider } from '../CustomSlider/CustomSlider';\nimport { sorts } from '../../Logic/algorithms';\nimport { DEFAULTS } from './Visualizer.constants';\nimport { generateRandomArray, nameToString } from '../../Logic/helpers';\n\nconst algorithms = _.keys(sorts);\n\nclass Visualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      phases: [],\n      cancelExecution: false,\n      timeoutID: null,\n      delay: DEFAULTS.DELAY,\n      size: DEFAULTS.SIZE,\n      isSorting: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const { size } = this.state;\n    const array = generateRandomArray(\n      size,\n      DEFAULTS.INTERVAL_MIN,\n      DEFAULTS.INTERVAL_MAX,\n    );\n\n    clearTimeout(this.state.timeoutID);\n    this.setState({ array, cancelExecution: true });\n  };\n\n  handleSort = sortType => {\n    const { array, isSorting } = this.state;\n\n    if (isSorting) {\n      this.onHaltExecution();\n    }\n\n    const sort = sorts[sortType];\n    const phases = sort(array);\n\n    this.setState(\n      { phases, cancelExecution: false, isSorting: true },\n      this.stepThroughPhases,\n    );\n  };\n\n  stepThroughPhases = () => {\n    const { phases, delay } = this.state;\n    const newArray = phases.shift();\n\n    this.setState({ array: newArray, phases }, () => {\n      if (this.state.phases.length && !this.state.cancelExecution) {\n        const timeoutID = setTimeout(this.stepThroughPhases, delay);\n        this.setState({ timeoutID });\n      }\n    });\n  };\n\n  onHandleAfterChange = (attribute, value) => {\n    this.setState({ [attribute]: value });\n  };\n\n  onHaltExecution = () => {\n    clearTimeout(this.state.timeoutID);\n    this.setState({ cancelExecution: true, phases: [] });\n  };\n\n  render() {\n    const { array, delay, size } = this.state;\n\n    return (\n      <div className=\"visualizer\">\n        <div className=\"sliders\">\n          <GenerateCustomSlider\n            attribute=\"delay\"\n            handleAfterChange={this.onHandleAfterChange}\n            max={1000}\n            min={5}\n            text=\"Select sorting delay in milliseconds\"\n            value={delay}\n          />\n          <GenerateCustomSlider\n            attribute=\"size\"\n            handleAfterChange={this.onHandleAfterChange}\n            max={100}\n            min={15}\n            text=\"Select number of columns for next new array\"\n            value={size}\n          />\n        </div>\n        <div className=\"sort-options\">\n          <button\n            type=\"button\"\n            className=\"btn btn-warning sort-button\"\n            onClick={this.resetArray}\n          >\n            Generate New Array\n          </button>\n          {_.map(algorithms, (name, index) => {\n            return (\n              <button\n                key={index}\n                type=\"button\"\n                className=\"btn btn-success sort-button\"\n                onClick={() => this.handleSort(name)}\n              >\n                {nameToString(name)}\n              </button>\n            );\n          })}\n          <button\n            className=\"btn btn-danger sort-button\"\n            onClick={this.onHaltExecution}\n          >\n            Halt Execution\n          </button>\n        </div>\n        <div className=\"array-container\">\n          {array.map((value, index) => (\n            <div\n              className=\"array-bar\"\n              key={index}\n              style={{\n                height: `${value * DEFAULTS.HEIGHT_MULTIPLIER}px`,\n                width: `${DEFAULTS.WIDTH}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Visualizer;\n","import React from 'react';\nimport './App.css';\nimport Visualizer from '../Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Sorting Visualizer</h1>\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}