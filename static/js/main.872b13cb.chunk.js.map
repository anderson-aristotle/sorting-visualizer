{"version":3,"sources":["Components/CustomSlider/CustomSlider.js","logic/helpers.js","logic/sorts/insertionSort.js","logic/sorts/index.js","logic/sorts/bubbleSort.js","logic/sorts/mergeSort.js","logic/sorts/quickSort.js","logic/sorts/heapSort.js","Components/Visualizer/Visualizer.constants.js","Components/Visualizer/Visualizer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["CustomHandle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","key","CustomSlider","handleAfterChange","attribute","text","rest","className","defaultValue","handle","onAfterChange","GenerateCustomSlider","CustomComponent","customProps","generateRandomArray","size","min","max","array","_","times","push","Math","floor","random","randomIntFromInterval","swap","indexA","indexB","temp","BUBBLE_SORT","unsortedArray","isSorted","lastUnsorted","length","phases","i","MERGE_SORT","changes","input","map","uniqueKey","simulateMergeSort","middle","left","slice","right","leftIndex","rightIndex","subArrayIndex","copy","output","data","itemToSwap","mostLeftItemToReplace","log","swapIndex","findIndex","item","simulateMergeSortHelper","each","change","keysToFind","availableLeftIndex","replacedIndex","simulateMergeSortChanges","QUICK_SORT","HEAP_SORT","INSERTION_SORT","indexStart","indexEnd","DEFAULTS","algorithms","keys","sorts","Visualizer","resetArray","state","clearTimeout","timeoutID","setState","cancelExecution","handleSort","sortType","isSorting","onHaltExecution","sort","stepThroughPhases","delay","oldPhases","oldArray","oldPreviousPhases","previousPhases","setTimeout","onHandleGoForwardOnePhase","nextPhase","nextPreviousPhases","onHandleGoBackOnePhase","onHandleAfterChange","this","type","onClick","name","toLowerCase","split","join","nameToString","style","height","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.872b13cb.chunk.js","sourcesContent":["import 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport React from 'react';\nimport Tooltip from 'rc-tooltip';\nimport { Handle } from 'rc-slider';\nimport Slider from 'rc-slider';\nimport './CustomSlider.scss';\n\nexport const CustomHandle = props => {\n  const { value, dragging, index, ...restProps } = props;\n\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nexport const CustomSlider = props => {\n  const { value, handleAfterChange, attribute, text, ...rest } = props;\n\n  return (\n    <div className=\"custom-slider\">\n      <p>{text}</p>\n      <p>current value: {value}</p>\n      <Slider\n        {...rest}\n        defaultValue={value}\n        handle={CustomHandle}\n        onAfterChange={value => handleAfterChange(attribute, value)}\n      />\n    </div>\n  );\n};\n\nexport const GenerateCustomSlider = ({\n  CustomComponent = CustomSlider,\n  ...customProps\n}) => {\n  return <CustomComponent {...customProps} />;\n};\n","import _ from 'lodash';\n\nexport const randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const generateRandomArray = (size, min, max) => {\n  const array = [];\n\n  _.times(size, () => {\n    array.push(randomIntFromInterval(min, max));\n  });\n\n  return array;\n};\n\nexport const arraysAreEqual = (arrayOne, arrayTwo) => {\n  return _.isEqual(arrayOne, arrayTwo);\n};\n\nexport const nameToString = name => {\n  const str = name\n    .toLowerCase()\n    .split('_')\n    .join(' ');\n  return str;\n};\n\nexport const swap = (indexA, indexB, array) => {\n  let temp = array[indexA];\n  array[indexA] = array[indexB];\n  array[indexB] = temp;\n};\n","import { swap } from '../helpers';\n\nexport const insertionSort = unsortedArray => {\n  const phases = [];\n  let indexStart = 1;\n  while (indexStart < unsortedArray.length) {\n    let indexEnd = indexStart;\n    while (\n      indexEnd > 0 &&\n      unsortedArray[indexEnd] < unsortedArray[indexEnd - 1]\n    ) {\n      swap(indexEnd, indexEnd - 1, unsortedArray);\n      indexEnd = indexEnd - 1;\n      phases.push([...unsortedArray]);\n    }\n    indexStart++;\n  }\n  return phases;\n};\n","import { bubbleSort } from './bubbleSort';\nimport { mergeSort } from './mergeSort';\nimport { insertionSort } from './insertionSort';\nimport { heapSort } from './heapSort';\nimport { quickSort } from './quickSort';\n\nexport default {\n  BUBBLE_SORT: bubbleSort,\n  MERGE_SORT: mergeSort,\n  QUICK_SORT: quickSort,\n  HEAP_SORT: heapSort,\n  INSERTION_SORT: insertionSort,\n};\n","import { swap } from '../helpers';\n\nexport const bubbleSort = unsortedArray => {\n  let isSorted = false;\n  let lastUnsorted = unsortedArray.length - 1;\n  const phases = [];\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < lastUnsorted; i++) {\n      if (unsortedArray[i] > unsortedArray[i + 1]) {\n        swap(i, i + 1, unsortedArray);\n        isSorted = false;\n        phases.push([...unsortedArray]);\n      }\n    }\n    lastUnsorted--;\n  }\n  return phases;\n};\n","import _ from 'lodash';\nimport uniqueKey from 'unique-key';\nimport { swap } from '../helpers';\n\nexport const mergeSort = unsortedArray => {\n  const changes = [];\n  const input = _.map(unsortedArray, (value, index) => ({\n    value,\n    index,\n    uniqueKey: uniqueKey(),\n  }));\n  simulateMergeSort(input, changes);\n  const phases = simulateMergeSortChanges(changes, [...input]);\n  return phases;\n};\n\nfunction simulateMergeSort(unsortedArray, changes) {\n  // does a merge sort\n  // keep track of unique keys associated with each array element\n  // keeps track of specific sub array that merge sort is processing\n  // swaps on elements on the fly inside of sub array\n  // pushes changes onto changes\n  // simula\n  if (unsortedArray.length <= 1) {\n    return unsortedArray;\n  }\n\n  const middle = Math.floor(unsortedArray.length / 2);\n  const left = unsortedArray.slice(0, middle);\n  const right = unsortedArray.slice(middle);\n\n  return simulateMergeSortHelper(\n    simulateMergeSort(left, changes),\n    simulateMergeSort(right, changes),\n    changes,\n  );\n}\n\nfunction simulateMergeSortHelper(left, right, changes) {\n  // @todo: refactor while loop\n  let leftIndex = 0;\n  let rightIndex = 0;\n  let subArrayIndex = 0;\n  let copy = [...left, ...right];\n\n  const output = [];\n\n  while (leftIndex < left.length && rightIndex < right.length) {\n    if (left[leftIndex].value < right[rightIndex].value) {\n      const data = {\n        itemToSwap: left[leftIndex],\n        mostLeftItemToReplace: copy[subArrayIndex],\n        log: `swap ${left[leftIndex].value} with ${copy[subArrayIndex].value}`,\n      };\n\n      if (data.itemToSwap.uniqueKey !== data.mostLeftItemToReplace.uniqueKey) {\n        changes.push(data);\n      }\n      output.push(left[leftIndex]);\n      const swapIndex = _.findIndex(\n        copy,\n        item => item.uniqueKey === data.itemToSwap.uniqueKey,\n      );\n\n      swap(swapIndex, subArrayIndex, copy);\n      leftIndex++;\n      subArrayIndex++;\n    } else {\n      const data = {\n        itemToSwap: right[rightIndex],\n        mostLeftItemToReplace: copy[subArrayIndex],\n        log: `swap ${right[rightIndex].value} with ${copy[subArrayIndex].value}`,\n      };\n      changes.push(data);\n      output.push(right[rightIndex]);\n      const swapIndex = _.findIndex(\n        copy,\n        item => item.uniqueKey === data.itemToSwap.uniqueKey,\n      );\n\n      swap(swapIndex, subArrayIndex, copy);\n      rightIndex++;\n      subArrayIndex++;\n    }\n  }\n\n  return [...output, ...left.slice(leftIndex), ...right.slice(rightIndex)];\n}\n\nfunction simulateMergeSortChanges(changes, array) {\n  const phases = [];\n  _.each(changes, change => {\n    // find corresponding item in array\n    const keysToFind = {\n      mostLeftItemToReplace: change.mostLeftItemToReplace.uniqueKey,\n      itemToSwap: change.itemToSwap.uniqueKey,\n    };\n\n    const availableLeftIndex = _.findIndex(\n      array,\n      item => item.uniqueKey === keysToFind.mostLeftItemToReplace,\n    );\n\n    const replacedIndex = _.findIndex(\n      array,\n      item => item.uniqueKey === keysToFind.itemToSwap,\n    );\n\n    swap(availableLeftIndex, replacedIndex, array);\n\n    phases.push([..._.map(array, ({ value }) => value)]);\n  });\n\n  return phases;\n}\n","export const quickSort = unsortedArray => {\n  return [unsortedArray];\n};\n","export const heapSort = unsortedArray => {\n  return [unsortedArray];\n};\n","export const DEFAULTS = {\n  DELAY: 200,\n  HEIGHT_MULTIPLIER: 4,\n  INTERVAL_MAX: 100,\n  INTERVAL_MIN: 5,\n  SIZE: 15,\n  WIDTH: 20,\n};\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport './Visualizer.scss';\nimport { GenerateCustomSlider } from '../CustomSlider/CustomSlider';\nimport { sorts } from '../../logic/algorithms';\nimport { DEFAULTS } from './Visualizer.constants';\nimport { generateRandomArray, nameToString } from '../../logic/helpers';\n\nconst algorithms = _.keys(sorts);\n\nclass Visualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      cancelExecution: false,\n      delay: DEFAULTS.DELAY,\n      isSorting: false,\n      phases: [],\n      previousPhases: [],\n      size: DEFAULTS.SIZE,\n      timeoutID: null,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const { size } = this.state;\n    const array = generateRandomArray(\n      size,\n      DEFAULTS.INTERVAL_MIN,\n      DEFAULTS.INTERVAL_MAX,\n    );\n\n    clearTimeout(this.state.timeoutID);\n    this.setState({ array, cancelExecution: true });\n  };\n\n  handleSort = sortType => {\n    const { array, isSorting } = this.state;\n\n    if (isSorting) {\n      this.onHaltExecution();\n      this.setState({ phases: [] });\n    }\n\n    const sort = sorts[sortType];\n    const phases = sort(array);\n\n    this.setState(\n      { phases, cancelExecution: false, isSorting: true },\n      this.stepThroughPhases,\n    );\n  };\n\n  stepThroughPhases = () => {\n    const {\n      delay,\n      phases: oldPhases,\n      array: oldArray,\n      previousPhases: oldPreviousPhases,\n    } = this.state;\n    const [array, ...phases] = oldPhases;\n    const previousPhases = [...oldPreviousPhases, oldArray];\n\n    this.setState(\n      {\n        array,\n        phases,\n        previousPhases,\n      },\n      () => {\n        if (this.state.phases.length && !this.state.cancelExecution) {\n          const timeoutID = setTimeout(this.stepThroughPhases, delay);\n          this.setState({ timeoutID });\n        }\n      },\n    );\n  };\n\n  onHandleGoForwardOnePhase = () => {\n    const { phases, previousPhases } = this.state;\n\n    if (!phases.length) {\n      return;\n    }\n\n    const [nextPhase, ...rest] = phases;\n    const nextPreviousPhases = [...previousPhases, nextPhase];\n\n    this.setState({\n      array: nextPhase,\n      phases: rest,\n      previousPhases: nextPreviousPhases,\n    });\n  };\n\n  onHandleGoBackOnePhase = () => {\n    // @todo\n  };\n\n  onHandleAfterChange = (attribute, value) => {\n    this.setState({ [attribute]: value });\n  };\n\n  onHaltExecution = () => {\n    clearTimeout(this.state.timeoutID);\n    this.setState({ cancelExecution: true });\n  };\n\n  render() {\n    const { array, delay, size } = this.state;\n\n    return (\n      <div className=\"visualizer\">\n        <div className=\"sliders\">\n          <GenerateCustomSlider\n            attribute=\"delay\"\n            handleAfterChange={this.onHandleAfterChange}\n            max={1000}\n            min={5}\n            text=\"Select sorting delay in milliseconds\"\n            value={delay}\n          />\n          <GenerateCustomSlider\n            attribute=\"size\"\n            handleAfterChange={this.onHandleAfterChange}\n            max={100}\n            min={5}\n            text=\"Select number of columns for next new array\"\n            value={size}\n          />\n        </div>\n        <div className=\"sort-options\">\n          <button\n            type=\"button\"\n            className=\"btn btn-warning sort-button\"\n            onClick={this.resetArray}\n          >\n            Generate New Array\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-dark sort-button\"\n            onClick={this.onHandleGoForwardOnePhase}\n          >\n            Go Forward\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-dark sort-button\"\n            onClick={this.onHandleGoBackOnePhase}\n          >\n            Go Back\n          </button>\n          {_.map(algorithms, (name, index) => {\n            return (\n              <button\n                key={index}\n                type=\"button\"\n                className=\"btn btn-success sort-button\"\n                onClick={() => this.handleSort(name)}\n              >\n                {nameToString(name)}\n              </button>\n            );\n          })}\n          <button\n            className=\"btn btn-danger sort-button\"\n            onClick={this.onHaltExecution}\n          >\n            Halt Execution\n          </button>\n        </div>\n        <div className=\"array-container\">\n          {array.map((value, index) => (\n            <div\n              className=\"array-bar\"\n              key={index}\n              style={{\n                height: `${value * DEFAULTS.HEIGHT_MULTIPLIER}px`,\n                width: `${DEFAULTS.WIDTH}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Visualizer;\n","import React from 'react';\nimport './App.css';\nimport Visualizer from '../Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Sorting Visualizer</h1>\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}